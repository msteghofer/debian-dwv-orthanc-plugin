From: =?utf-8?q?Martin_Stegh=C3=B6fer?= <martin@steghoefer.eu>
Date: Sat, 24 Oct 2015 18:10:14 +0200
Subject: Prepare the code for the use of external files as third-party
 libraries (replacing the ones included as minified versions).

---
 CMakeLists.txt |  6 +++++-
 Plugin.cpp     | 28 +++++++++++++++++++++++-----
 2 files changed, 28 insertions(+), 6 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index d9b0829..d4b7bdb 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -24,9 +24,13 @@ if (NOT EXISTS "${AUTOGENERATED_DIR}/${ORTHANC_PLUGIN_H}")
   endif()
 endif()
 
+# grab thirdparty library files
+# ... copy files from thirdparty libraries to ${CMAKE_CURRENT_BINARY_DIR}/ThirdParty ...
+
 # create resources file
 include(${CMAKE_SOURCE_DIR}/Resources/CMake/AutoGeneratedCode.cmake)
-EmbedResources( DWV_EXPLORER ${CMAKE_CURRENT_SOURCE_DIR}/Explorer )
+EmbedResources( DWV_EXPLORER ${CMAKE_CURRENT_SOURCE_DIR}/Explorer
+                DWV_EXPLORER_THIRDPARTY ${CMAKE_CURRENT_BINARY_DIR}/ThirdParty )
 
 # create library
 add_library(${PROJECT_NAME} SHARED Plugin.cpp ${AUTOGENERATED_SOURCES})
diff --git a/Plugin.cpp b/Plugin.cpp
index 8fd984e..78b959f 100644
--- a/Plugin.cpp
+++ b/Plugin.cpp
@@ -33,10 +33,11 @@
 
 static OrthancPluginContext* context = NULL;
 
-ORTHANC_PLUGINS_API int32_t CallbackRessources( 
+ORTHANC_PLUGINS_API int32_t CallbackResources( 
   OrthancPluginRestOutput* output,
   const char* url,
-  const OrthancPluginHttpRequest* request)
+  const OrthancPluginHttpRequest* request,
+  Orthanc::EmbeddedResources::DirectoryResourceId resourceId)
 {
   // build the file path
   const std::string file = request->groups[0];
@@ -46,7 +47,7 @@ ORTHANC_PLUGINS_API int32_t CallbackRessources(
   try
   {
     answerSize = Orthanc::EmbeddedResources::GetDirectoryResourceSize(
-      Orthanc::EmbeddedResources::DWV_EXPLORER, path.c_str());
+      resourceId, path.c_str());
   }
   catch (...)
   {
@@ -57,7 +58,7 @@ ORTHANC_PLUGINS_API int32_t CallbackRessources(
   }
   // get the answer buffer
   const char* answer = static_cast<const char*>(Orthanc::EmbeddedResources::GetDirectoryResourceBuffer(
-    Orthanc::EmbeddedResources::DWV_EXPLORER, path.c_str()));
+    resourceId, path.c_str()));
   // find mime type
   const std::string ext = file.substr( file.find_last_of('.') + 1, file.size() );
   std::string mimeType = "";
@@ -76,6 +77,22 @@ ORTHANC_PLUGINS_API int32_t CallbackRessources(
   return 0;
 }
 
+ORTHANC_PLUGINS_API int32_t CallbackResourcesDwv( 
+  OrthancPluginRestOutput* output,
+  const char* url,
+  const OrthancPluginHttpRequest* request)
+{
+  return CallbackResources(output, url, request, Orthanc::EmbeddedResources::DWV_EXPLORER);
+}
+
+ORTHANC_PLUGINS_API int32_t CallbackResourcesTp( 
+  OrthancPluginRestOutput* output,
+  const char* url,
+  const OrthancPluginHttpRequest* request)
+{
+  return CallbackResources(output, url, request, Orthanc::EmbeddedResources::DWV_EXPLORER_THIRDPARTY);
+}
+
 extern "C"
 {
 
@@ -99,7 +116,8 @@ ORTHANC_PLUGINS_API int32_t OrthancPluginInitialize(OrthancPluginContext* c)
   }
 
   // Register the callbacks
-  OrthancPluginRegisterRestCallback(context, "/dwv-plugin/(.*)", CallbackRessources);
+  OrthancPluginRegisterRestCallback(context, "/dwv-plugin/(.*)", CallbackResourcesDwv);
+  OrthancPluginRegisterRestCallback(context, "/dwv-plugin-tp/(.*)", CallbackResourcesTp);
   
   // Replace preview button
   const std::string path = "/replace.js";
